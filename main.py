#!/usr/bin/env python

import subprocess
import optparse
import re


def change_mac(interface, new_mac):
    print("[....] Changing MAC address for " + interface + " to " + new_mac)
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])


def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-i", "--interface", dest="interface", help="the interface affected by the change")
    parser.add_option("-m", "--mac", dest="new_mac", help="the new mac address")
    (options, arguments) = parser.parse_args()
    if not options.interface:
        parser.error("[-] pls specify a valid interface and check --help for further information")
    elif not options.new_mac:
        parser.error("[-] pls specify a valid mac address and check --help for further information")
    else:
        return options


def get_mac(interface):
    ifconfig_result = subprocess.check_output(["ifconfig", interface]).decode()
    search_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result)
    if search_result:
        mac = search_result.group(0)
        return mac
        # a0:c5:89:be:d9:17
    else:
        print("[-] could not read mac address")


def validate(mac1, mac2):
    if str(mac1) == str(mac2):
        print("[+] mac address changed to " + old_mac)
    else:
        print("we couldn't change your mac address")


options = get_arguments()
old_mac = get_mac(options.interface)
print("[+] current map address is " + old_mac)
change_mac(options.interface, options.new_mac)
new_mac = get_mac(options.interface)
validate(new_mac, options.new_mac)


